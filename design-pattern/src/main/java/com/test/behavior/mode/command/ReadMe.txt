命令模式

在开发过程中，我可能会需要向某些对象发送一些请求，但是我们不知请求的具体接收者是谁，也不知道被请求的操作是那个，
我们只知道在程序运行中指定具体的请求接收者即可。打个比方，电视遥控器，我们只需要知道按那个按钮能够打开电视、关闭电视和换台即可，
并不需要知道是怎么开电视、关电视和换台的。对于这种情况，我们可以采用命令模式来进行设计。

命令模式定义如下：
命令模式(Command	Pattern)：将一个请求封装为一个对象，从而让我们可用不同的请求对客户
进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象
行为型模式，其别名为动作(Action)模式或事务(Transaction)模式。

命令模式的关键在于引入了抽象命令类，请求发送者针对抽象命令类编程，只有实现了抽象
命令类的具体命令才与请求接收者相关联。

命令模式的结构
●　客户端(Client)角色：创建一个具体命令(ConcreteCommand)对象并确定其接收者。
●　命令(Command)角色：声明了一个给所有具体命令类的抽象接口。
●　具体命令(ConcreteCommand)角色：定义一个接收者和行为之间的弱耦合；实现execute()方法，负责调用接收者的相应操作。execute()方法通常叫做执行方法。
●　请求者(Invoker)角色：负责调用命令对象执行请求，相关的方法叫做行动方法。
●　接收者(Receiver)角色：负责具体实施和执行一个请求。任何一个类都可以成为接收者，实施和执行请求的方法叫做行动方法。

命令模式的适用场景
    对于大多数请求-响应模式的功能，比较适合使用命令模式，正如命令模式定义说的那样，命令模式对实现记录日志、撤销操作等功能比较方便。
https://www.cnblogs.com/chenssy/p/3202107.html
